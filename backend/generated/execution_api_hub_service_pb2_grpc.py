# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import execution_api_hub_pb2 as execution__api__hub__pb2


class ExecutionApiHubServiceStub(object):
    """Defines the service for the ExecutionApiHub, facilitating execution-related actions.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecutionAcceptor = channel.unary_unary(
                '/ExecutionApiHubService/ExecutionAcceptor',
                request_serializer=execution__api__hub__pb2.ExecutionAcceptorRequest.SerializeToString,
                response_deserializer=execution__api__hub__pb2.ExecutionAcceptorResponse.FromString,
                )
        self.ExecutionInitiator = channel.unary_unary(
                '/ExecutionApiHubService/ExecutionInitiator',
                request_serializer=execution__api__hub__pb2.ExecutionInitiatorRequest.SerializeToString,
                response_deserializer=execution__api__hub__pb2.ExecutionInitiatorResponse.FromString,
                )
        self.ExecutionFixDrop = channel.unary_unary(
                '/ExecutionApiHubService/ExecutionFixDrop',
                request_serializer=execution__api__hub__pb2.ExecutionFixDropRequest.SerializeToString,
                response_deserializer=execution__api__hub__pb2.ExecutionFixDropResponse.FromString,
                )


class ExecutionApiHubServiceServicer(object):
    """Defines the service for the ExecutionApiHub, facilitating execution-related actions.
    """

    def ExecutionAcceptor(self, request, context):
        """RPC method for accepting execution requests. This method takes an ExecutionAcceptorRequest and returns an ExecutionAcceptorResponse.
        It is exposed over HTTP as a POST request to the "/execution-acceptor" endpoint.
        The body of the HTTP request should contain the 'ExecutionUpdateInfo' message.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecutionInitiator(self, request, context):
        """RPC method for initiating execution requests. This method accepts an ExecutionInitiatorRequest and returns an ExecutionInitiatorResponse.
        It is exposed over HTTP as a POST request to the "/execution-initiator" endpoint.
        The body of the HTTP request should contain the 'Order' message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecutionFixDrop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecutionApiHubServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecutionAcceptor': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecutionAcceptor,
                    request_deserializer=execution__api__hub__pb2.ExecutionAcceptorRequest.FromString,
                    response_serializer=execution__api__hub__pb2.ExecutionAcceptorResponse.SerializeToString,
            ),
            'ExecutionInitiator': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecutionInitiator,
                    request_deserializer=execution__api__hub__pb2.ExecutionInitiatorRequest.FromString,
                    response_serializer=execution__api__hub__pb2.ExecutionInitiatorResponse.SerializeToString,
            ),
            'ExecutionFixDrop': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecutionFixDrop,
                    request_deserializer=execution__api__hub__pb2.ExecutionFixDropRequest.FromString,
                    response_serializer=execution__api__hub__pb2.ExecutionFixDropResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ExecutionApiHubService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecutionApiHubService(object):
    """Defines the service for the ExecutionApiHub, facilitating execution-related actions.
    """

    @staticmethod
    def ExecutionAcceptor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExecutionApiHubService/ExecutionAcceptor',
            execution__api__hub__pb2.ExecutionAcceptorRequest.SerializeToString,
            execution__api__hub__pb2.ExecutionAcceptorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecutionInitiator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExecutionApiHubService/ExecutionInitiator',
            execution__api__hub__pb2.ExecutionInitiatorRequest.SerializeToString,
            execution__api__hub__pb2.ExecutionInitiatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecutionFixDrop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ExecutionApiHubService/ExecutionFixDrop',
            execution__api__hub__pb2.ExecutionFixDropRequest.SerializeToString,
            execution__api__hub__pb2.ExecutionFixDropResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
