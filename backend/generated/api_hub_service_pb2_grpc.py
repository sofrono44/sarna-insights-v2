# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import account_ach_pb2 as account__ach__pb2
from . import account_application_pb2 as account__application__pb2
from . import accounts_pb2 as accounts__pb2
from . import balances_pb2 as balances__pb2
from . import bp_pb2 as bp__pb2
from . import commissions_pb2 as commissions__pb2
from . import glossary_pb2 as glossary__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import market_data_entitlement_pb2 as market__data__entitlement__pb2
from . import order_execution_logs_pb2 as order__execution__logs__pb2
from . import orders_pb2 as orders__pb2
from . import positions_pb2 as positions__pb2
from . import quotes_pb2 as quotes__pb2
from . import search_pb2 as search__pb2
from . import securities_master_pb2 as securities__master__pb2
from . import sessions_pb2 as sessions__pb2
from . import subscriptions_pb2 as subscriptions__pb2
from . import time_machine_pb2 as time__machine__pb2
from . import trading_level_change_pb2 as trading__level__change__pb2
from . import trading_pb2 as trading__pb2
from . import user_data_pb2 as user__data__pb2
from . import ux_messages_pb2 as ux__messages__pb2


class SessionsServiceStub(object):
    """Session Service
    Handles user session management
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/SessionsService/Create',
                request_serializer=sessions__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=sessions__pb2.SessionInfoResponse.FromString,
                )


class SessionsServiceServicer(object):
    """Session Service
    Handles user session management
    """

    def Create(self, request, context):
        """Creates a new user sessions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SessionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=sessions__pb2.CreateSessionRequest.FromString,
                    response_serializer=sessions__pb2.SessionInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SessionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SessionsService(object):
    """Session Service
    Handles user session management
    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SessionsService/Create',
            sessions__pb2.CreateSessionRequest.SerializeToString,
            sessions__pb2.SessionInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MessagesServiceStub(object):
    """Message Service
    Manages translated messages for the platform
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/MessagesService/Get',
                request_serializer=ux__messages__pb2.GetUxMessagesRequest.SerializeToString,
                response_deserializer=ux__messages__pb2.GetUxMessagesResponse.FromString,
                )


class MessagesServiceServicer(object):
    """Message Service
    Manages translated messages for the platform
    """

    def Get(self, request, context):
        """Returns list of translated messages for provided language
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessagesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=ux__messages__pb2.GetUxMessagesRequest.FromString,
                    response_serializer=ux__messages__pb2.GetUxMessagesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MessagesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessagesService(object):
    """Message Service
    Manages translated messages for the platform
    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessagesService/Get',
            ux__messages__pb2.GetUxMessagesRequest.SerializeToString,
            ux__messages__pb2.GetUxMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SecuritiesMasterServiceStub(object):
    """Securities Master Service - manages securities master data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/SecuritiesMasterService/Get',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=securities__master__pb2.SecuritiesMasterDataResponse.FromString,
                )
        self.GetOptions = channel.unary_unary(
                '/SecuritiesMasterService/GetOptions',
                request_serializer=securities__master__pb2.SecuritiesMasterDataRequest.SerializeToString,
                response_deserializer=securities__master__pb2.SecuritiesMasterDataResponse.FromString,
                )


class SecuritiesMasterServiceServicer(object):
    """Securities Master Service - manages securities master data
    """

    def Get(self, request, context):
        """Gets list of all equities and ETFs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptions(self, request, context):
        """Gets options by underlying symbols array
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SecuritiesMasterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=securities__master__pb2.SecuritiesMasterDataResponse.SerializeToString,
            ),
            'GetOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptions,
                    request_deserializer=securities__master__pb2.SecuritiesMasterDataRequest.FromString,
                    response_serializer=securities__master__pb2.SecuritiesMasterDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SecuritiesMasterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SecuritiesMasterService(object):
    """Securities Master Service - manages securities master data
    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SecuritiesMasterService/Get',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            securities__master__pb2.SecuritiesMasterDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SecuritiesMasterService/GetOptions',
            securities__master__pb2.SecuritiesMasterDataRequest.SerializeToString,
            securities__master__pb2.SecuritiesMasterDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CommissionsServiceStub(object):
    """Commissions Service - manages commissions and promo code claims
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/CommissionsService/Get',
                request_serializer=commissions__pb2.CommissionPromoClaimRequest.SerializeToString,
                response_deserializer=commissions__pb2.CommissionPromoClaimResponse.FromString,
                )


class CommissionsServiceServicer(object):
    """Commissions Service - manages commissions and promo code claims
    """

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommissionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=commissions__pb2.CommissionPromoClaimRequest.FromString,
                    response_serializer=commissions__pb2.CommissionPromoClaimResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CommissionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CommissionsService(object):
    """Commissions Service - manages commissions and promo code claims
    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommissionsService/Get',
            commissions__pb2.CommissionPromoClaimRequest.SerializeToString,
            commissions__pb2.CommissionPromoClaimResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GlossaryServiceStub(object):
    """Glossary Service - provides glossary terms and definitions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/GlossaryService/Get',
                request_serializer=glossary__pb2.GetProvincesRequest.SerializeToString,
                response_deserializer=glossary__pb2.GlossaryResponse.FromString,
                )


class GlossaryServiceServicer(object):
    """Glossary Service - provides glossary terms and definitions
    """

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GlossaryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=glossary__pb2.GetProvincesRequest.FromString,
                    response_serializer=glossary__pb2.GlossaryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GlossaryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GlossaryService(object):
    """Glossary Service - provides glossary terms and definitions
    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GlossaryService/Get',
            glossary__pb2.GetProvincesRequest.SerializeToString,
            glossary__pb2.GlossaryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SubscriptionsServiceStub(object):
    """Subscription Service - manages user subscriptions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UserStatus = channel.unary_unary(
                '/SubscriptionsService/UserStatus',
                request_serializer=subscriptions__pb2.UserStatusCheckRequest.SerializeToString,
                response_deserializer=subscriptions__pb2.UserStatusCheckResponse.FromString,
                )
        self.SubscriptionActivation = channel.unary_unary(
                '/SubscriptionsService/SubscriptionActivation',
                request_serializer=subscriptions__pb2.UserPlatformSubscriptionActivationRequest.SerializeToString,
                response_deserializer=subscriptions__pb2.UserPlatformSubscriptionActivationResponse.FromString,
                )
        self.SubscriptionDeactivation = channel.unary_unary(
                '/SubscriptionsService/SubscriptionDeactivation',
                request_serializer=subscriptions__pb2.UserPlatformSubscriptionDeactivationRequest.SerializeToString,
                response_deserializer=subscriptions__pb2.UserPlatformSubscriptionDeactivationResponse.FromString,
                )
        self.PromoClaim = channel.unary_unary(
                '/SubscriptionsService/PromoClaim',
                request_serializer=subscriptions__pb2.PromoClaimRequest.SerializeToString,
                response_deserializer=subscriptions__pb2.PromoClaimResponse.FromString,
                )


class SubscriptionsServiceServicer(object):
    """Subscription Service - manages user subscriptions
    """

    def UserStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscriptionActivation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscriptionDeactivation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PromoClaim(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubscriptionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UserStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UserStatus,
                    request_deserializer=subscriptions__pb2.UserStatusCheckRequest.FromString,
                    response_serializer=subscriptions__pb2.UserStatusCheckResponse.SerializeToString,
            ),
            'SubscriptionActivation': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscriptionActivation,
                    request_deserializer=subscriptions__pb2.UserPlatformSubscriptionActivationRequest.FromString,
                    response_serializer=subscriptions__pb2.UserPlatformSubscriptionActivationResponse.SerializeToString,
            ),
            'SubscriptionDeactivation': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscriptionDeactivation,
                    request_deserializer=subscriptions__pb2.UserPlatformSubscriptionDeactivationRequest.FromString,
                    response_serializer=subscriptions__pb2.UserPlatformSubscriptionDeactivationResponse.SerializeToString,
            ),
            'PromoClaim': grpc.unary_unary_rpc_method_handler(
                    servicer.PromoClaim,
                    request_deserializer=subscriptions__pb2.PromoClaimRequest.FromString,
                    response_serializer=subscriptions__pb2.PromoClaimResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SubscriptionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SubscriptionsService(object):
    """Subscription Service - manages user subscriptions
    """

    @staticmethod
    def UserStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubscriptionsService/UserStatus',
            subscriptions__pb2.UserStatusCheckRequest.SerializeToString,
            subscriptions__pb2.UserStatusCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscriptionActivation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubscriptionsService/SubscriptionActivation',
            subscriptions__pb2.UserPlatformSubscriptionActivationRequest.SerializeToString,
            subscriptions__pb2.UserPlatformSubscriptionActivationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscriptionDeactivation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubscriptionsService/SubscriptionDeactivation',
            subscriptions__pb2.UserPlatformSubscriptionDeactivationRequest.SerializeToString,
            subscriptions__pb2.UserPlatformSubscriptionDeactivationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PromoClaim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SubscriptionsService/PromoClaim',
            subscriptions__pb2.PromoClaimRequest.SerializeToString,
            subscriptions__pb2.PromoClaimResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TradeServiceStub(object):
    """Trade Service - manages trade execution and information
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Trade = channel.unary_unary(
                '/TradeService/Trade',
                request_serializer=trading__pb2.TradeRequest.SerializeToString,
                response_deserializer=trading__pb2.TradeResponse.FromString,
                )


class TradeServiceServicer(object):
    """Trade Service - manages trade execution and information
    """

    def Trade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Trade': grpc.unary_unary_rpc_method_handler(
                    servicer.Trade,
                    request_deserializer=trading__pb2.TradeRequest.FromString,
                    response_serializer=trading__pb2.TradeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TradeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TradeService(object):
    """Trade Service - manages trade execution and information
    """

    @staticmethod
    def Trade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TradeService/Trade',
            trading__pb2.TradeRequest.SerializeToString,
            trading__pb2.TradeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BalancesServiceStub(object):
    """Balances Service - provides account balance information
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/BalancesService/Get',
                request_serializer=balances__pb2.BalancesInfoRequest.SerializeToString,
                response_deserializer=balances__pb2.BalancesInfoResponse.FromString,
                )
        self.GetBalance = channel.unary_unary(
                '/BalancesService/GetBalance',
                request_serializer=balances__pb2.BalanceCashInfoRequest.SerializeToString,
                response_deserializer=balances__pb2.BalanceCashInfoResponse.FromString,
                )
        self.Adjust = channel.unary_unary(
                '/BalancesService/Adjust',
                request_serializer=balances__pb2.BalanceAdjustmentRequest.SerializeToString,
                response_deserializer=balances__pb2.BalanceAdjustmentResponse.FromString,
                )


class BalancesServiceServicer(object):
    """Balances Service - provides account balance information
    """

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Adjust(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BalancesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=balances__pb2.BalancesInfoRequest.FromString,
                    response_serializer=balances__pb2.BalancesInfoResponse.SerializeToString,
            ),
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=balances__pb2.BalanceCashInfoRequest.FromString,
                    response_serializer=balances__pb2.BalanceCashInfoResponse.SerializeToString,
            ),
            'Adjust': grpc.unary_unary_rpc_method_handler(
                    servicer.Adjust,
                    request_deserializer=balances__pb2.BalanceAdjustmentRequest.FromString,
                    response_serializer=balances__pb2.BalanceAdjustmentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BalancesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BalancesService(object):
    """Balances Service - provides account balance information
    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BalancesService/Get',
            balances__pb2.BalancesInfoRequest.SerializeToString,
            balances__pb2.BalancesInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BalancesService/GetBalance',
            balances__pb2.BalanceCashInfoRequest.SerializeToString,
            balances__pb2.BalanceCashInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Adjust(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BalancesService/Adjust',
            balances__pb2.BalanceAdjustmentRequest.SerializeToString,
            balances__pb2.BalanceAdjustmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OrderExecutionLogsServiceStub(object):
    """Order Execution Logs Service - manages order execution logs
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetByOrderId = channel.unary_unary(
                '/OrderExecutionLogsService/GetByOrderId',
                request_serializer=order__execution__logs__pb2.OrderExecutionLogsSearchCriteria.SerializeToString,
                response_deserializer=order__execution__logs__pb2.OrderExecutionLogsResponse.FromString,
                )
        self.GetByAccountToday = channel.unary_unary(
                '/OrderExecutionLogsService/GetByAccountToday',
                request_serializer=order__execution__logs__pb2.OrderExecutionLogsSearchCriteria.SerializeToString,
                response_deserializer=order__execution__logs__pb2.OrderExecutionLogsResponse.FromString,
                )
        self.GetByAccountHistorical = channel.unary_unary(
                '/OrderExecutionLogsService/GetByAccountHistorical',
                request_serializer=order__execution__logs__pb2.OrderExecutionLogsSearchCriteria.SerializeToString,
                response_deserializer=order__execution__logs__pb2.OrderExecutionLogsResponse.FromString,
                )
        self.GetAllByAccount = channel.unary_unary(
                '/OrderExecutionLogsService/GetAllByAccount',
                request_serializer=order__execution__logs__pb2.OrderExecutionLogsSearchCriteria.SerializeToString,
                response_deserializer=order__execution__logs__pb2.OrderExecutionLogsResponse.FromString,
                )


class OrderExecutionLogsServiceServicer(object):
    """Order Execution Logs Service - manages order execution logs
    """

    def GetByOrderId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetByAccountToday(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetByAccountHistorical(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllByAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderExecutionLogsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetByOrderId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetByOrderId,
                    request_deserializer=order__execution__logs__pb2.OrderExecutionLogsSearchCriteria.FromString,
                    response_serializer=order__execution__logs__pb2.OrderExecutionLogsResponse.SerializeToString,
            ),
            'GetByAccountToday': grpc.unary_unary_rpc_method_handler(
                    servicer.GetByAccountToday,
                    request_deserializer=order__execution__logs__pb2.OrderExecutionLogsSearchCriteria.FromString,
                    response_serializer=order__execution__logs__pb2.OrderExecutionLogsResponse.SerializeToString,
            ),
            'GetByAccountHistorical': grpc.unary_unary_rpc_method_handler(
                    servicer.GetByAccountHistorical,
                    request_deserializer=order__execution__logs__pb2.OrderExecutionLogsSearchCriteria.FromString,
                    response_serializer=order__execution__logs__pb2.OrderExecutionLogsResponse.SerializeToString,
            ),
            'GetAllByAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllByAccount,
                    request_deserializer=order__execution__logs__pb2.OrderExecutionLogsSearchCriteria.FromString,
                    response_serializer=order__execution__logs__pb2.OrderExecutionLogsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OrderExecutionLogsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrderExecutionLogsService(object):
    """Order Execution Logs Service - manages order execution logs
    """

    @staticmethod
    def GetByOrderId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OrderExecutionLogsService/GetByOrderId',
            order__execution__logs__pb2.OrderExecutionLogsSearchCriteria.SerializeToString,
            order__execution__logs__pb2.OrderExecutionLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetByAccountToday(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OrderExecutionLogsService/GetByAccountToday',
            order__execution__logs__pb2.OrderExecutionLogsSearchCriteria.SerializeToString,
            order__execution__logs__pb2.OrderExecutionLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetByAccountHistorical(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OrderExecutionLogsService/GetByAccountHistorical',
            order__execution__logs__pb2.OrderExecutionLogsSearchCriteria.SerializeToString,
            order__execution__logs__pb2.OrderExecutionLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllByAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OrderExecutionLogsService/GetAllByAccount',
            order__execution__logs__pb2.OrderExecutionLogsSearchCriteria.SerializeToString,
            order__execution__logs__pb2.OrderExecutionLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class QuotesServiceStub(object):
    """Quotes Service - provides stock, ETF and options quotes
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetQuote = channel.unary_unary(
                '/QuotesService/GetQuote',
                request_serializer=quotes__pb2.GetQuoteRequestInfo.SerializeToString,
                response_deserializer=quotes__pb2.QuoteResponse.FromString,
                )
        self.GetQuotes = channel.unary_unary(
                '/QuotesService/GetQuotes',
                request_serializer=quotes__pb2.GetQuotesRequestInfo.SerializeToString,
                response_deserializer=quotes__pb2.QuoteResponse.FromString,
                )
        self.GetNetQuote = channel.unary_unary(
                '/QuotesService/GetNetQuote',
                request_serializer=quotes__pb2.GetNetQuoteRequestInfos.SerializeToString,
                response_deserializer=quotes__pb2.QuoteResponse.FromString,
                )
        self.GetChainQuotes = channel.unary_unary(
                '/QuotesService/GetChainQuotes',
                request_serializer=quotes__pb2.GetChainQuotesRequestInfo.SerializeToString,
                response_deserializer=quotes__pb2.ChainQuoteResponse.FromString,
                )
        self.GetExpirations = channel.unary_unary(
                '/QuotesService/GetExpirations',
                request_serializer=quotes__pb2.GetExpirationsRequest.SerializeToString,
                response_deserializer=quotes__pb2.GetExpirationsResponse.FromString,
                )


class QuotesServiceServicer(object):
    """Quotes Service - provides stock, ETF and options quotes
    """

    def GetQuote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuotes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNetQuote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChainQuotes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExpirations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuotesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetQuote': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuote,
                    request_deserializer=quotes__pb2.GetQuoteRequestInfo.FromString,
                    response_serializer=quotes__pb2.QuoteResponse.SerializeToString,
            ),
            'GetQuotes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuotes,
                    request_deserializer=quotes__pb2.GetQuotesRequestInfo.FromString,
                    response_serializer=quotes__pb2.QuoteResponse.SerializeToString,
            ),
            'GetNetQuote': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNetQuote,
                    request_deserializer=quotes__pb2.GetNetQuoteRequestInfos.FromString,
                    response_serializer=quotes__pb2.QuoteResponse.SerializeToString,
            ),
            'GetChainQuotes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChainQuotes,
                    request_deserializer=quotes__pb2.GetChainQuotesRequestInfo.FromString,
                    response_serializer=quotes__pb2.ChainQuoteResponse.SerializeToString,
            ),
            'GetExpirations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExpirations,
                    request_deserializer=quotes__pb2.GetExpirationsRequest.FromString,
                    response_serializer=quotes__pb2.GetExpirationsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'QuotesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QuotesService(object):
    """Quotes Service - provides stock, ETF and options quotes
    """

    @staticmethod
    def GetQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QuotesService/GetQuote',
            quotes__pb2.GetQuoteRequestInfo.SerializeToString,
            quotes__pb2.QuoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQuotes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QuotesService/GetQuotes',
            quotes__pb2.GetQuotesRequestInfo.SerializeToString,
            quotes__pb2.QuoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNetQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QuotesService/GetNetQuote',
            quotes__pb2.GetNetQuoteRequestInfos.SerializeToString,
            quotes__pb2.QuoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChainQuotes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QuotesService/GetChainQuotes',
            quotes__pb2.GetChainQuotesRequestInfo.SerializeToString,
            quotes__pb2.ChainQuoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExpirations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QuotesService/GetExpirations',
            quotes__pb2.GetExpirationsRequest.SerializeToString,
            quotes__pb2.GetExpirationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PositionsServiceStub(object):
    """Positions Service - manages account positions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/PositionsService/Get',
                request_serializer=positions__pb2.PositionsInfoRequest.SerializeToString,
                response_deserializer=positions__pb2.PositionsInfoResponse.FromString,
                )


class PositionsServiceServicer(object):
    """Positions Service - manages account positions
    """

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PositionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=positions__pb2.PositionsInfoRequest.FromString,
                    response_serializer=positions__pb2.PositionsInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PositionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PositionsService(object):
    """Positions Service - manages account positions
    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PositionsService/Get',
            positions__pb2.PositionsInfoRequest.SerializeToString,
            positions__pb2.PositionsInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OrdersServiceStub(object):
    """Orders Service - manages order placement and information
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/OrdersService/Get',
                request_serializer=orders__pb2.OrdersInfoRequest.SerializeToString,
                response_deserializer=orders__pb2.OrdersInfoResponse.FromString,
                )


class OrdersServiceServicer(object):
    """Orders Service - manages order placement and information
    """

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrdersServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=orders__pb2.OrdersInfoRequest.FromString,
                    response_serializer=orders__pb2.OrdersInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OrdersService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrdersService(object):
    """Orders Service - manages order placement and information
    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OrdersService/Get',
            orders__pb2.OrdersInfoRequest.SerializeToString,
            orders__pb2.OrdersInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BuyingPowerServiceStub(object):
    """Buying Power Service - provides information about real-time buying power at the account level and the sub account level
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/BuyingPowerService/Get',
                request_serializer=bp__pb2.BuyingPowerRequest.SerializeToString,
                response_deserializer=bp__pb2.BuyingPowerResponse.FromString,
                )


class BuyingPowerServiceServicer(object):
    """Buying Power Service - provides information about real-time buying power at the account level and the sub account level
    """

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BuyingPowerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=bp__pb2.BuyingPowerRequest.FromString,
                    response_serializer=bp__pb2.BuyingPowerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BuyingPowerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BuyingPowerService(object):
    """Buying Power Service - provides information about real-time buying power at the account level and the sub account level
    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BuyingPowerService/Get',
            bp__pb2.BuyingPowerRequest.SerializeToString,
            bp__pb2.BuyingPowerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AccountsServiceStub(object):
    """Accounts Service - manages account information and operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AccountsInfo = channel.unary_unary(
                '/AccountsService/AccountsInfo',
                request_serializer=accounts__pb2.AccountsInfoRequest.SerializeToString,
                response_deserializer=accounts__pb2.AccountsInfoResponse.FromString,
                )
        self.CreateSubaccount = channel.unary_unary(
                '/AccountsService/CreateSubaccount',
                request_serializer=accounts__pb2.CreateSubaccountRequest.SerializeToString,
                response_deserializer=accounts__pb2.CreateSubaccountResponse.FromString,
                )
        self.DeleteSubaccount = channel.unary_unary(
                '/AccountsService/DeleteSubaccount',
                request_serializer=accounts__pb2.DeleteSubaccountRequest.SerializeToString,
                response_deserializer=accounts__pb2.DeleteSubaccountResponse.FromString,
                )
        self.UpdateNickname = channel.unary_unary(
                '/AccountsService/UpdateNickname',
                request_serializer=accounts__pb2.UpdateNicknameRequest.SerializeToString,
                response_deserializer=accounts__pb2.AccountsInfoResponse.FromString,
                )
        self.CreateVTAccount = channel.unary_unary(
                '/AccountsService/CreateVTAccount',
                request_serializer=accounts__pb2.CreateVTAccountRequest.SerializeToString,
                response_deserializer=accounts__pb2.CreateVTAccountResponse.FromString,
                )
        self.GetAccountActivity = channel.unary_unary(
                '/AccountsService/GetAccountActivity',
                request_serializer=accounts__pb2.GetAccountsActivityRequest.SerializeToString,
                response_deserializer=accounts__pb2.GetAccountsActivityResponse.FromString,
                )
        self.AskForTradingLevelChange = channel.unary_unary(
                '/AccountsService/AskForTradingLevelChange',
                request_serializer=trading__level__change__pb2.AskForTradingLevelChangeRequest.SerializeToString,
                response_deserializer=trading__level__change__pb2.AskForTradingLevelChangeResponse.FromString,
                )
        self.SubaccountsTransfer = channel.unary_unary(
                '/AccountsService/SubaccountsTransfer',
                request_serializer=accounts__pb2.SubaccountsTransferRequest.SerializeToString,
                response_deserializer=accounts__pb2.SubaccountsTransferResponse.FromString,
                )
        self.CreateAbaAccount = channel.unary_unary(
                '/AccountsService/CreateAbaAccount',
                request_serializer=account__ach__pb2.CreateAbaAccountRequest.SerializeToString,
                response_deserializer=account__ach__pb2.CreateAbaAccountResponse.FromString,
                )
        self.BrowseAbaAccount = channel.unary_unary(
                '/AccountsService/BrowseAbaAccount',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=account__ach__pb2.BrowseAbaAccountsResponse.FromString,
                )
        self.CreateAccountAchTransfer = channel.unary_unary(
                '/AccountsService/CreateAccountAchTransfer',
                request_serializer=account__ach__pb2.CreateAccountAchTransferRequest.SerializeToString,
                response_deserializer=account__ach__pb2.CreateAccountAchTransferResponse.FromString,
                )
        self.LinkGroup = channel.unary_unary(
                '/AccountsService/LinkGroup',
                request_serializer=accounts__pb2.LinkAccountGroupRequest.SerializeToString,
                response_deserializer=accounts__pb2.LinkAccountGroupResponse.FromString,
                )
        self.UnlinkGroup = channel.unary_unary(
                '/AccountsService/UnlinkGroup',
                request_serializer=accounts__pb2.LinkAccountGroupRequest.SerializeToString,
                response_deserializer=accounts__pb2.LinkAccountGroupResponse.FromString,
                )
        self.ChangeGroup = channel.unary_unary(
                '/AccountsService/ChangeGroup',
                request_serializer=accounts__pb2.ChangeAccountGroupRequest.SerializeToString,
                response_deserializer=accounts__pb2.LinkAccountGroupResponse.FromString,
                )


class AccountsServiceServicer(object):
    """Accounts Service - manages account information and operations
    """

    def AccountsInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSubaccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSubaccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateNickname(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateVTAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountActivity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AskForTradingLevelChange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubaccountsTransfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAbaAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BrowseAbaAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAccountAchTransfer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LinkGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlinkGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AccountsInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountsInfo,
                    request_deserializer=accounts__pb2.AccountsInfoRequest.FromString,
                    response_serializer=accounts__pb2.AccountsInfoResponse.SerializeToString,
            ),
            'CreateSubaccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSubaccount,
                    request_deserializer=accounts__pb2.CreateSubaccountRequest.FromString,
                    response_serializer=accounts__pb2.CreateSubaccountResponse.SerializeToString,
            ),
            'DeleteSubaccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSubaccount,
                    request_deserializer=accounts__pb2.DeleteSubaccountRequest.FromString,
                    response_serializer=accounts__pb2.DeleteSubaccountResponse.SerializeToString,
            ),
            'UpdateNickname': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateNickname,
                    request_deserializer=accounts__pb2.UpdateNicknameRequest.FromString,
                    response_serializer=accounts__pb2.AccountsInfoResponse.SerializeToString,
            ),
            'CreateVTAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVTAccount,
                    request_deserializer=accounts__pb2.CreateVTAccountRequest.FromString,
                    response_serializer=accounts__pb2.CreateVTAccountResponse.SerializeToString,
            ),
            'GetAccountActivity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccountActivity,
                    request_deserializer=accounts__pb2.GetAccountsActivityRequest.FromString,
                    response_serializer=accounts__pb2.GetAccountsActivityResponse.SerializeToString,
            ),
            'AskForTradingLevelChange': grpc.unary_unary_rpc_method_handler(
                    servicer.AskForTradingLevelChange,
                    request_deserializer=trading__level__change__pb2.AskForTradingLevelChangeRequest.FromString,
                    response_serializer=trading__level__change__pb2.AskForTradingLevelChangeResponse.SerializeToString,
            ),
            'SubaccountsTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.SubaccountsTransfer,
                    request_deserializer=accounts__pb2.SubaccountsTransferRequest.FromString,
                    response_serializer=accounts__pb2.SubaccountsTransferResponse.SerializeToString,
            ),
            'CreateAbaAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAbaAccount,
                    request_deserializer=account__ach__pb2.CreateAbaAccountRequest.FromString,
                    response_serializer=account__ach__pb2.CreateAbaAccountResponse.SerializeToString,
            ),
            'BrowseAbaAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.BrowseAbaAccount,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=account__ach__pb2.BrowseAbaAccountsResponse.SerializeToString,
            ),
            'CreateAccountAchTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccountAchTransfer,
                    request_deserializer=account__ach__pb2.CreateAccountAchTransferRequest.FromString,
                    response_serializer=account__ach__pb2.CreateAccountAchTransferResponse.SerializeToString,
            ),
            'LinkGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.LinkGroup,
                    request_deserializer=accounts__pb2.LinkAccountGroupRequest.FromString,
                    response_serializer=accounts__pb2.LinkAccountGroupResponse.SerializeToString,
            ),
            'UnlinkGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlinkGroup,
                    request_deserializer=accounts__pb2.LinkAccountGroupRequest.FromString,
                    response_serializer=accounts__pb2.LinkAccountGroupResponse.SerializeToString,
            ),
            'ChangeGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeGroup,
                    request_deserializer=accounts__pb2.ChangeAccountGroupRequest.FromString,
                    response_serializer=accounts__pb2.LinkAccountGroupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AccountsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AccountsService(object):
    """Accounts Service - manages account information and operations
    """

    @staticmethod
    def AccountsInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/AccountsInfo',
            accounts__pb2.AccountsInfoRequest.SerializeToString,
            accounts__pb2.AccountsInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSubaccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/CreateSubaccount',
            accounts__pb2.CreateSubaccountRequest.SerializeToString,
            accounts__pb2.CreateSubaccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSubaccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/DeleteSubaccount',
            accounts__pb2.DeleteSubaccountRequest.SerializeToString,
            accounts__pb2.DeleteSubaccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateNickname(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/UpdateNickname',
            accounts__pb2.UpdateNicknameRequest.SerializeToString,
            accounts__pb2.AccountsInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateVTAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/CreateVTAccount',
            accounts__pb2.CreateVTAccountRequest.SerializeToString,
            accounts__pb2.CreateVTAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccountActivity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/GetAccountActivity',
            accounts__pb2.GetAccountsActivityRequest.SerializeToString,
            accounts__pb2.GetAccountsActivityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AskForTradingLevelChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/AskForTradingLevelChange',
            trading__level__change__pb2.AskForTradingLevelChangeRequest.SerializeToString,
            trading__level__change__pb2.AskForTradingLevelChangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubaccountsTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/SubaccountsTransfer',
            accounts__pb2.SubaccountsTransferRequest.SerializeToString,
            accounts__pb2.SubaccountsTransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAbaAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/CreateAbaAccount',
            account__ach__pb2.CreateAbaAccountRequest.SerializeToString,
            account__ach__pb2.CreateAbaAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BrowseAbaAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/BrowseAbaAccount',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            account__ach__pb2.BrowseAbaAccountsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAccountAchTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/CreateAccountAchTransfer',
            account__ach__pb2.CreateAccountAchTransferRequest.SerializeToString,
            account__ach__pb2.CreateAccountAchTransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LinkGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/LinkGroup',
            accounts__pb2.LinkAccountGroupRequest.SerializeToString,
            accounts__pb2.LinkAccountGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnlinkGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/UnlinkGroup',
            accounts__pb2.LinkAccountGroupRequest.SerializeToString,
            accounts__pb2.LinkAccountGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsService/ChangeGroup',
            accounts__pb2.ChangeAccountGroupRequest.SerializeToString,
            accounts__pb2.LinkAccountGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AccountApplicationsServiceStub(object):
    """Account Application Service - manages account application process for both new accounts and addition of accounts for existging clients. The service includes the collection
    of personal and employment details, market data entitlements, investment and risk profile, security questions and trusted contacts. Data collected here is used to auto-recommend
    options trading level for accounts requesting options trading.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ValidatePerson = channel.unary_unary(
                '/AccountApplicationsService/ValidatePerson',
                request_serializer=account__application__pb2.AccountApplicationPersonRequest.SerializeToString,
                response_deserializer=account__application__pb2.AccountApplicationResponse.FromString,
                )
        self.ValidateAccount = channel.unary_unary(
                '/AccountApplicationsService/ValidateAccount',
                request_serializer=account__application__pb2.AccountApplicationAccountRequest.SerializeToString,
                response_deserializer=account__application__pb2.AccountApplicationResponse.FromString,
                )
        self.ValidateAddresses = channel.unary_unary(
                '/AccountApplicationsService/ValidateAddresses',
                request_serializer=account__application__pb2.AccountApplicationAddressesRequest.SerializeToString,
                response_deserializer=account__application__pb2.AccountApplicationResponse.FromString,
                )
        self.ValidateInvestmentProfile = channel.unary_unary(
                '/AccountApplicationsService/ValidateInvestmentProfile',
                request_serializer=account__application__pb2.AccountApplicationInvestmentProfileRequest.SerializeToString,
                response_deserializer=account__application__pb2.AccountApplicationResponse.FromString,
                )
        self.ValidateEmployment = channel.unary_unary(
                '/AccountApplicationsService/ValidateEmployment',
                request_serializer=account__application__pb2.Employment.SerializeToString,
                response_deserializer=account__application__pb2.AccountApplicationResponse.FromString,
                )
        self.ValidateFederalDisclosure = channel.unary_unary(
                '/AccountApplicationsService/ValidateFederalDisclosure',
                request_serializer=account__application__pb2.FederalDisclosure.SerializeToString,
                response_deserializer=account__application__pb2.AccountApplicationResponse.FromString,
                )
        self.ValidateSecurityQuestions = channel.unary_unary(
                '/AccountApplicationsService/ValidateSecurityQuestions',
                request_serializer=account__application__pb2.SecurityQuestionUserResponseRequest.SerializeToString,
                response_deserializer=account__application__pb2.AccountApplicationResponse.FromString,
                )
        self.ValidateTrustedContact = channel.unary_unary(
                '/AccountApplicationsService/ValidateTrustedContact',
                request_serializer=account__application__pb2.CreateTrustedContactRequest.SerializeToString,
                response_deserializer=account__application__pb2.AccountApplicationResponse.FromString,
                )
        self.ValidateMarketDataEntitlementFormResponses = channel.unary_unary(
                '/AccountApplicationsService/ValidateMarketDataEntitlementFormResponses',
                request_serializer=market__data__entitlement__pb2.MarketDataEntitlementFormResponses.SerializeToString,
                response_deserializer=account__application__pb2.AccountApplicationResponse.FromString,
                )
        self.ValidateOtherBrokerageAccount = channel.unary_unary(
                '/AccountApplicationsService/ValidateOtherBrokerageAccount',
                request_serializer=account__application__pb2.ExternalBrokerageAccountInfo.SerializeToString,
                response_deserializer=account__application__pb2.AccountApplicationResponse.FromString,
                )
        self.CreateVerificationSession = channel.unary_unary(
                '/AccountApplicationsService/CreateVerificationSession',
                request_serializer=account__application__pb2.AccountApplicationCreateVerificationSessionRequest.SerializeToString,
                response_deserializer=account__application__pb2.VerificationSessionResponse.FromString,
                )
        self.CreateAccount = channel.unary_unary(
                '/AccountApplicationsService/CreateAccount',
                request_serializer=account__application__pb2.CreateAccountApplicationRequest.SerializeToString,
                response_deserializer=account__application__pb2.AccountApplicationResponse.FromString,
                )


class AccountApplicationsServiceServicer(object):
    """Account Application Service - manages account application process for both new accounts and addition of accounts for existging clients. The service includes the collection
    of personal and employment details, market data entitlements, investment and risk profile, security questions and trusted contacts. Data collected here is used to auto-recommend
    options trading level for accounts requesting options trading.
    """

    def ValidatePerson(self, request, context):
        """Validate person data
        Description:
        Validates person data from Account Application form.
        This method should be called after user enter personal data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateAddresses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateInvestmentProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateEmployment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateFederalDisclosure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateSecurityQuestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateTrustedContact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateMarketDataEntitlementFormResponses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateOtherBrokerageAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateVerificationSession(self, request, context):
        """create
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountApplicationsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ValidatePerson': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidatePerson,
                    request_deserializer=account__application__pb2.AccountApplicationPersonRequest.FromString,
                    response_serializer=account__application__pb2.AccountApplicationResponse.SerializeToString,
            ),
            'ValidateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateAccount,
                    request_deserializer=account__application__pb2.AccountApplicationAccountRequest.FromString,
                    response_serializer=account__application__pb2.AccountApplicationResponse.SerializeToString,
            ),
            'ValidateAddresses': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateAddresses,
                    request_deserializer=account__application__pb2.AccountApplicationAddressesRequest.FromString,
                    response_serializer=account__application__pb2.AccountApplicationResponse.SerializeToString,
            ),
            'ValidateInvestmentProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateInvestmentProfile,
                    request_deserializer=account__application__pb2.AccountApplicationInvestmentProfileRequest.FromString,
                    response_serializer=account__application__pb2.AccountApplicationResponse.SerializeToString,
            ),
            'ValidateEmployment': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateEmployment,
                    request_deserializer=account__application__pb2.Employment.FromString,
                    response_serializer=account__application__pb2.AccountApplicationResponse.SerializeToString,
            ),
            'ValidateFederalDisclosure': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateFederalDisclosure,
                    request_deserializer=account__application__pb2.FederalDisclosure.FromString,
                    response_serializer=account__application__pb2.AccountApplicationResponse.SerializeToString,
            ),
            'ValidateSecurityQuestions': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateSecurityQuestions,
                    request_deserializer=account__application__pb2.SecurityQuestionUserResponseRequest.FromString,
                    response_serializer=account__application__pb2.AccountApplicationResponse.SerializeToString,
            ),
            'ValidateTrustedContact': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateTrustedContact,
                    request_deserializer=account__application__pb2.CreateTrustedContactRequest.FromString,
                    response_serializer=account__application__pb2.AccountApplicationResponse.SerializeToString,
            ),
            'ValidateMarketDataEntitlementFormResponses': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateMarketDataEntitlementFormResponses,
                    request_deserializer=market__data__entitlement__pb2.MarketDataEntitlementFormResponses.FromString,
                    response_serializer=account__application__pb2.AccountApplicationResponse.SerializeToString,
            ),
            'ValidateOtherBrokerageAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateOtherBrokerageAccount,
                    request_deserializer=account__application__pb2.ExternalBrokerageAccountInfo.FromString,
                    response_serializer=account__application__pb2.AccountApplicationResponse.SerializeToString,
            ),
            'CreateVerificationSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVerificationSession,
                    request_deserializer=account__application__pb2.AccountApplicationCreateVerificationSessionRequest.FromString,
                    response_serializer=account__application__pb2.VerificationSessionResponse.SerializeToString,
            ),
            'CreateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=account__application__pb2.CreateAccountApplicationRequest.FromString,
                    response_serializer=account__application__pb2.AccountApplicationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AccountApplicationsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AccountApplicationsService(object):
    """Account Application Service - manages account application process for both new accounts and addition of accounts for existging clients. The service includes the collection
    of personal and employment details, market data entitlements, investment and risk profile, security questions and trusted contacts. Data collected here is used to auto-recommend
    options trading level for accounts requesting options trading.
    """

    @staticmethod
    def ValidatePerson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountApplicationsService/ValidatePerson',
            account__application__pb2.AccountApplicationPersonRequest.SerializeToString,
            account__application__pb2.AccountApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountApplicationsService/ValidateAccount',
            account__application__pb2.AccountApplicationAccountRequest.SerializeToString,
            account__application__pb2.AccountApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateAddresses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountApplicationsService/ValidateAddresses',
            account__application__pb2.AccountApplicationAddressesRequest.SerializeToString,
            account__application__pb2.AccountApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateInvestmentProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountApplicationsService/ValidateInvestmentProfile',
            account__application__pb2.AccountApplicationInvestmentProfileRequest.SerializeToString,
            account__application__pb2.AccountApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateEmployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountApplicationsService/ValidateEmployment',
            account__application__pb2.Employment.SerializeToString,
            account__application__pb2.AccountApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateFederalDisclosure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountApplicationsService/ValidateFederalDisclosure',
            account__application__pb2.FederalDisclosure.SerializeToString,
            account__application__pb2.AccountApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateSecurityQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountApplicationsService/ValidateSecurityQuestions',
            account__application__pb2.SecurityQuestionUserResponseRequest.SerializeToString,
            account__application__pb2.AccountApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateTrustedContact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountApplicationsService/ValidateTrustedContact',
            account__application__pb2.CreateTrustedContactRequest.SerializeToString,
            account__application__pb2.AccountApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateMarketDataEntitlementFormResponses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountApplicationsService/ValidateMarketDataEntitlementFormResponses',
            market__data__entitlement__pb2.MarketDataEntitlementFormResponses.SerializeToString,
            account__application__pb2.AccountApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateOtherBrokerageAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountApplicationsService/ValidateOtherBrokerageAccount',
            account__application__pb2.ExternalBrokerageAccountInfo.SerializeToString,
            account__application__pb2.AccountApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateVerificationSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountApplicationsService/CreateVerificationSession',
            account__application__pb2.AccountApplicationCreateVerificationSessionRequest.SerializeToString,
            account__application__pb2.VerificationSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountApplicationsService/CreateAccount',
            account__application__pb2.CreateAccountApplicationRequest.SerializeToString,
            account__application__pb2.AccountApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UsersServiceStub(object):
    """Users Service - manages user profiles and preferences including notifications, market date entitlements and account security questions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUserProfile = channel.unary_unary(
                '/UsersService/GetUserProfile',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=user__data__pb2.GetUserProfileResponse.FromString,
                )
        self.UpdateUserProfile = channel.unary_unary(
                '/UsersService/UpdateUserProfile',
                request_serializer=user__data__pb2.UserProfile.SerializeToString,
                response_deserializer=user__data__pb2.GetUserProfileResponse.FromString,
                )
        self.UpdateUserEmail = channel.unary_unary(
                '/UsersService/UpdateUserEmail',
                request_serializer=user__data__pb2.UpdateUserEmailRequest.SerializeToString,
                response_deserializer=user__data__pb2.GetUserProfileResponse.FromString,
                )
        self.GetInvestmentProfile = channel.unary_unary(
                '/UsersService/GetInvestmentProfile',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=account__application__pb2.GetInvestmentProfileResponse.FromString,
                )
        self.GetExternalBrokerageAccountInfo = channel.unary_unary(
                '/UsersService/GetExternalBrokerageAccountInfo',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=account__application__pb2.GetExternalBrokerageAccountInfoResponse.FromString,
                )
        self.GetAllSecurityQuestions = channel.unary_unary(
                '/UsersService/GetAllSecurityQuestions',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=account__application__pb2.SecurityQuestions.FromString,
                )
        self.GetSecurityQuestionUserResponses = channel.unary_unary(
                '/UsersService/GetSecurityQuestionUserResponses',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=account__application__pb2.SecurityQuestionUserResponsesResponse.FromString,
                )
        self.UpdateSecurityQuestionUserResponses = channel.unary_unary(
                '/UsersService/UpdateSecurityQuestionUserResponses',
                request_serializer=account__application__pb2.SecurityQuestionUserResponseRequest.SerializeToString,
                response_deserializer=account__application__pb2.SecurityQuestionUserResponsesResponse.FromString,
                )
        self.GetAllMdeFormQuestions = channel.unary_unary(
                '/UsersService/GetAllMdeFormQuestions',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=market__data__entitlement__pb2.MarketDataEntitlementFormQuestions.FromString,
                )
        self.GetMdeFormResponses = channel.unary_unary(
                '/UsersService/GetMdeFormResponses',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=market__data__entitlement__pb2.MarketDataEntitlementFormResponsesResponse.FromString,
                )
        self.UpdateMdeFormUserResponses = channel.unary_unary(
                '/UsersService/UpdateMdeFormUserResponses',
                request_serializer=market__data__entitlement__pb2.MarketDataEntitlementFormResponses.SerializeToString,
                response_deserializer=market__data__entitlement__pb2.MarketDataEntitlementFormResponsesResponse.FromString,
                )
        self.DeleteMdeFormQuestionsUserResponses = channel.unary_unary(
                '/UsersService/DeleteMdeFormQuestionsUserResponses',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=market__data__entitlement__pb2.MarketDataEntitlementFormResponsesResponse.FromString,
                )
        self.GetUserNotificationPreferences = channel.unary_unary(
                '/UsersService/GetUserNotificationPreferences',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=user__data__pb2.GetUserNotificationPreferencesResponse.FromString,
                )
        self.UpdateUserNotificationPreferences = channel.unary_unary(
                '/UsersService/UpdateUserNotificationPreferences',
                request_serializer=user__data__pb2.UpdateUserNotificationPreferencesRequest.SerializeToString,
                response_deserializer=user__data__pb2.GetUserNotificationPreferencesResponse.FromString,
                )
        self.GetUserPreferences = channel.unary_unary(
                '/UsersService/GetUserPreferences',
                request_serializer=user__data__pb2.GetUserPreferencesRequest.SerializeToString,
                response_deserializer=user__data__pb2.GetUserPreferencesResponse.FromString,
                )
        self.UpdateUserPreferences = channel.unary_unary(
                '/UsersService/UpdateUserPreferences',
                request_serializer=user__data__pb2.UpdateUserPreferencesRequest.SerializeToString,
                response_deserializer=user__data__pb2.GetUserPreferencesResponse.FromString,
                )


class UsersServiceServicer(object):
    """Users Service - manages user profiles and preferences including notifications, market date entitlements and account security questions
    """

    def GetUserProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserEmail(self, request, context):
        """Not implemented
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInvestmentProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExternalBrokerageAccountInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllSecurityQuestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSecurityQuestionUserResponses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSecurityQuestionUserResponses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllMdeFormQuestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMdeFormResponses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMdeFormUserResponses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMdeFormQuestionsUserResponses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserNotificationPreferences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserNotificationPreferences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserPreferences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserPreferences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsersServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserProfile,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=user__data__pb2.GetUserProfileResponse.SerializeToString,
            ),
            'UpdateUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserProfile,
                    request_deserializer=user__data__pb2.UserProfile.FromString,
                    response_serializer=user__data__pb2.GetUserProfileResponse.SerializeToString,
            ),
            'UpdateUserEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserEmail,
                    request_deserializer=user__data__pb2.UpdateUserEmailRequest.FromString,
                    response_serializer=user__data__pb2.GetUserProfileResponse.SerializeToString,
            ),
            'GetInvestmentProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInvestmentProfile,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=account__application__pb2.GetInvestmentProfileResponse.SerializeToString,
            ),
            'GetExternalBrokerageAccountInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExternalBrokerageAccountInfo,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=account__application__pb2.GetExternalBrokerageAccountInfoResponse.SerializeToString,
            ),
            'GetAllSecurityQuestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllSecurityQuestions,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=account__application__pb2.SecurityQuestions.SerializeToString,
            ),
            'GetSecurityQuestionUserResponses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSecurityQuestionUserResponses,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=account__application__pb2.SecurityQuestionUserResponsesResponse.SerializeToString,
            ),
            'UpdateSecurityQuestionUserResponses': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSecurityQuestionUserResponses,
                    request_deserializer=account__application__pb2.SecurityQuestionUserResponseRequest.FromString,
                    response_serializer=account__application__pb2.SecurityQuestionUserResponsesResponse.SerializeToString,
            ),
            'GetAllMdeFormQuestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllMdeFormQuestions,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=market__data__entitlement__pb2.MarketDataEntitlementFormQuestions.SerializeToString,
            ),
            'GetMdeFormResponses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMdeFormResponses,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=market__data__entitlement__pb2.MarketDataEntitlementFormResponsesResponse.SerializeToString,
            ),
            'UpdateMdeFormUserResponses': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMdeFormUserResponses,
                    request_deserializer=market__data__entitlement__pb2.MarketDataEntitlementFormResponses.FromString,
                    response_serializer=market__data__entitlement__pb2.MarketDataEntitlementFormResponsesResponse.SerializeToString,
            ),
            'DeleteMdeFormQuestionsUserResponses': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMdeFormQuestionsUserResponses,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=market__data__entitlement__pb2.MarketDataEntitlementFormResponsesResponse.SerializeToString,
            ),
            'GetUserNotificationPreferences': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserNotificationPreferences,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=user__data__pb2.GetUserNotificationPreferencesResponse.SerializeToString,
            ),
            'UpdateUserNotificationPreferences': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserNotificationPreferences,
                    request_deserializer=user__data__pb2.UpdateUserNotificationPreferencesRequest.FromString,
                    response_serializer=user__data__pb2.GetUserNotificationPreferencesResponse.SerializeToString,
            ),
            'GetUserPreferences': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserPreferences,
                    request_deserializer=user__data__pb2.GetUserPreferencesRequest.FromString,
                    response_serializer=user__data__pb2.GetUserPreferencesResponse.SerializeToString,
            ),
            'UpdateUserPreferences': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserPreferences,
                    request_deserializer=user__data__pb2.UpdateUserPreferencesRequest.FromString,
                    response_serializer=user__data__pb2.GetUserPreferencesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UsersService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UsersService(object):
    """Users Service - manages user profiles and preferences including notifications, market date entitlements and account security questions
    """

    @staticmethod
    def GetUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/GetUserProfile',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            user__data__pb2.GetUserProfileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/UpdateUserProfile',
            user__data__pb2.UserProfile.SerializeToString,
            user__data__pb2.GetUserProfileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/UpdateUserEmail',
            user__data__pb2.UpdateUserEmailRequest.SerializeToString,
            user__data__pb2.GetUserProfileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInvestmentProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/GetInvestmentProfile',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            account__application__pb2.GetInvestmentProfileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExternalBrokerageAccountInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/GetExternalBrokerageAccountInfo',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            account__application__pb2.GetExternalBrokerageAccountInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllSecurityQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/GetAllSecurityQuestions',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            account__application__pb2.SecurityQuestions.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSecurityQuestionUserResponses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/GetSecurityQuestionUserResponses',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            account__application__pb2.SecurityQuestionUserResponsesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSecurityQuestionUserResponses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/UpdateSecurityQuestionUserResponses',
            account__application__pb2.SecurityQuestionUserResponseRequest.SerializeToString,
            account__application__pb2.SecurityQuestionUserResponsesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllMdeFormQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/GetAllMdeFormQuestions',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            market__data__entitlement__pb2.MarketDataEntitlementFormQuestions.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMdeFormResponses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/GetMdeFormResponses',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            market__data__entitlement__pb2.MarketDataEntitlementFormResponsesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMdeFormUserResponses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/UpdateMdeFormUserResponses',
            market__data__entitlement__pb2.MarketDataEntitlementFormResponses.SerializeToString,
            market__data__entitlement__pb2.MarketDataEntitlementFormResponsesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteMdeFormQuestionsUserResponses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/DeleteMdeFormQuestionsUserResponses',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            market__data__entitlement__pb2.MarketDataEntitlementFormResponsesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserNotificationPreferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/GetUserNotificationPreferences',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            user__data__pb2.GetUserNotificationPreferencesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserNotificationPreferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/UpdateUserNotificationPreferences',
            user__data__pb2.UpdateUserNotificationPreferencesRequest.SerializeToString,
            user__data__pb2.GetUserNotificationPreferencesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserPreferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/GetUserPreferences',
            user__data__pb2.GetUserPreferencesRequest.SerializeToString,
            user__data__pb2.GetUserPreferencesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserPreferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersService/UpdateUserPreferences',
            user__data__pb2.UpdateUserPreferencesRequest.SerializeToString,
            user__data__pb2.GetUserPreferencesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SearchServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Search = channel.unary_unary(
                '/SearchService/Search',
                request_serializer=search__pb2.SearchRequest.SerializeToString,
                response_deserializer=search__pb2.SearchServiceResponse.FromString,
                )
        self.GetDefinition = channel.unary_unary(
                '/SearchService/GetDefinition',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=search__pb2.SearchServiceDefinitionResponse.FromString,
                )


class SearchServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDefinition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SearchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=search__pb2.SearchRequest.FromString,
                    response_serializer=search__pb2.SearchServiceResponse.SerializeToString,
            ),
            'GetDefinition': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDefinition,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=search__pb2.SearchServiceDefinitionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SearchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SearchService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SearchService/Search',
            search__pb2.SearchRequest.SerializeToString,
            search__pb2.SearchServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDefinition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SearchService/GetDefinition',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            search__pb2.SearchServiceDefinitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TimeMachineServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/TimeMachineService/List',
                request_serializer=time__machine__pb2.TimeMachineBrowseRequest.SerializeToString,
                response_deserializer=time__machine__pb2.TimeMachineBrowseResponse.FromString,
                )
        self.Get = channel.unary_unary(
                '/TimeMachineService/Get',
                request_serializer=time__machine__pb2.TimeMachineDownloadRequest.SerializeToString,
                response_deserializer=time__machine__pb2.TimeMachineDownloadResponse.FromString,
                )


class TimeMachineServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TimeMachineServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=time__machine__pb2.TimeMachineBrowseRequest.FromString,
                    response_serializer=time__machine__pb2.TimeMachineBrowseResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=time__machine__pb2.TimeMachineDownloadRequest.FromString,
                    response_serializer=time__machine__pb2.TimeMachineDownloadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TimeMachineService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TimeMachineService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TimeMachineService/List',
            time__machine__pb2.TimeMachineBrowseRequest.SerializeToString,
            time__machine__pb2.TimeMachineBrowseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TimeMachineService/Get',
            time__machine__pb2.TimeMachineDownloadRequest.SerializeToString,
            time__machine__pb2.TimeMachineDownloadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
