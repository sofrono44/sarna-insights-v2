# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import admin_alerts_pb2 as admin_dot_admin__alerts__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class AdminAlertRuleServiceStub(object):
    """Service definition for managing alert rules
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchDefinitions = channel.unary_unary(
                '/AdminAlertRuleService/SearchDefinitions',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=admin_dot_admin__alerts__pb2.AlertRuleSearchDefinitionsResponse.FromString,
                )
        self.Search = channel.unary_unary(
                '/AdminAlertRuleService/Search',
                request_serializer=admin_dot_admin__alerts__pb2.AlertRuleSearchRequest.SerializeToString,
                response_deserializer=admin_dot_admin__alerts__pb2.AlertRuleSearchResponse.FromString,
                )
        self.Save = channel.unary_unary(
                '/AdminAlertRuleService/Save',
                request_serializer=admin_dot_admin__alerts__pb2.SaveAlertRuleRequest.SerializeToString,
                response_deserializer=admin_dot_admin__alerts__pb2.SaveAlertRuleResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/AdminAlertRuleService/Delete',
                request_serializer=admin_dot_admin__alerts__pb2.DeleteAlertRuleRequest.SerializeToString,
                response_deserializer=admin_dot_admin__alerts__pb2.DeleteAlertRuleResponse.FromString,
                )


class AdminAlertRuleServiceServicer(object):
    """Service definition for managing alert rules
    """

    def SearchDefinitions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Search for alert rules based on criteria
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Save(self, request, context):
        """Create a new alert rule
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Delete an alert rule
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminAlertRuleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchDefinitions': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchDefinitions,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=admin_dot_admin__alerts__pb2.AlertRuleSearchDefinitionsResponse.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=admin_dot_admin__alerts__pb2.AlertRuleSearchRequest.FromString,
                    response_serializer=admin_dot_admin__alerts__pb2.AlertRuleSearchResponse.SerializeToString,
            ),
            'Save': grpc.unary_unary_rpc_method_handler(
                    servicer.Save,
                    request_deserializer=admin_dot_admin__alerts__pb2.SaveAlertRuleRequest.FromString,
                    response_serializer=admin_dot_admin__alerts__pb2.SaveAlertRuleResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=admin_dot_admin__alerts__pb2.DeleteAlertRuleRequest.FromString,
                    response_serializer=admin_dot_admin__alerts__pb2.DeleteAlertRuleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AdminAlertRuleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminAlertRuleService(object):
    """Service definition for managing alert rules
    """

    @staticmethod
    def SearchDefinitions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminAlertRuleService/SearchDefinitions',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            admin_dot_admin__alerts__pb2.AlertRuleSearchDefinitionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminAlertRuleService/Search',
            admin_dot_admin__alerts__pb2.AlertRuleSearchRequest.SerializeToString,
            admin_dot_admin__alerts__pb2.AlertRuleSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Save(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminAlertRuleService/Save',
            admin_dot_admin__alerts__pb2.SaveAlertRuleRequest.SerializeToString,
            admin_dot_admin__alerts__pb2.SaveAlertRuleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminAlertRuleService/Delete',
            admin_dot_admin__alerts__pb2.DeleteAlertRuleRequest.SerializeToString,
            admin_dot_admin__alerts__pb2.DeleteAlertRuleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AdminAlertNotificationServiceStub(object):
    """Service definition for managing alert notifications
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/AdminAlertNotificationService/List',
                request_serializer=admin_dot_admin__alerts__pb2.AlertNotificationListRequest.SerializeToString,
                response_deserializer=admin_dot_admin__alerts__pb2.AlertNotificationsListResponse.FromString,
                )
        self.Save = channel.unary_unary(
                '/AdminAlertNotificationService/Save',
                request_serializer=admin_dot_admin__alerts__pb2.SaveAlertNotificationRequest.SerializeToString,
                response_deserializer=admin_dot_admin__alerts__pb2.SaveAlertNotificationResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/AdminAlertNotificationService/Delete',
                request_serializer=admin_dot_admin__alerts__pb2.DeleteAlertNotificationRequest.SerializeToString,
                response_deserializer=admin_dot_admin__alerts__pb2.DeleteAlertNotificationResponse.FromString,
                )


class AdminAlertNotificationServiceServicer(object):
    """Service definition for managing alert notifications
    """

    def List(self, request, context):
        """Search for alert notifications based on criteria
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Save(self, request, context):
        """Create a new alert notification
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Delete an alert notification
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminAlertNotificationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=admin_dot_admin__alerts__pb2.AlertNotificationListRequest.FromString,
                    response_serializer=admin_dot_admin__alerts__pb2.AlertNotificationsListResponse.SerializeToString,
            ),
            'Save': grpc.unary_unary_rpc_method_handler(
                    servicer.Save,
                    request_deserializer=admin_dot_admin__alerts__pb2.SaveAlertNotificationRequest.FromString,
                    response_serializer=admin_dot_admin__alerts__pb2.SaveAlertNotificationResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=admin_dot_admin__alerts__pb2.DeleteAlertNotificationRequest.FromString,
                    response_serializer=admin_dot_admin__alerts__pb2.DeleteAlertNotificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AdminAlertNotificationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminAlertNotificationService(object):
    """Service definition for managing alert notifications
    """

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminAlertNotificationService/List',
            admin_dot_admin__alerts__pb2.AlertNotificationListRequest.SerializeToString,
            admin_dot_admin__alerts__pb2.AlertNotificationsListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Save(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminAlertNotificationService/Save',
            admin_dot_admin__alerts__pb2.SaveAlertNotificationRequest.SerializeToString,
            admin_dot_admin__alerts__pb2.SaveAlertNotificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminAlertNotificationService/Delete',
            admin_dot_admin__alerts__pb2.DeleteAlertNotificationRequest.SerializeToString,
            admin_dot_admin__alerts__pb2.DeleteAlertNotificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AdminAlertServiceStub(object):
    """Service definition for managing alert s
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Search = channel.unary_unary(
                '/AdminAlertService/Search',
                request_serializer=admin_dot_admin__alerts__pb2.AlertSearchRequest.SerializeToString,
                response_deserializer=admin_dot_admin__alerts__pb2.AlertSearchResponse.FromString,
                )
        self.Acknowledge = channel.unary_unary(
                '/AdminAlertService/Acknowledge',
                request_serializer=admin_dot_admin__alerts__pb2.AcknowledgeAlertRequest.SerializeToString,
                response_deserializer=admin_dot_admin__alerts__pb2.AlertOperationResponse.FromString,
                )
        self.Resolve = channel.unary_unary(
                '/AdminAlertService/Resolve',
                request_serializer=admin_dot_admin__alerts__pb2.ResolveAlertRequest.SerializeToString,
                response_deserializer=admin_dot_admin__alerts__pb2.AlertOperationResponse.FromString,
                )


class AdminAlertServiceServicer(object):
    """Service definition for managing alert s
    """

    def Search(self, request, context):
        """Search for alert s based on criteria
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Acknowledge(self, request, context):
        """Acknowledge an alert
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Resolve(self, request, context):
        """Resolve an alert
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminAlertServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=admin_dot_admin__alerts__pb2.AlertSearchRequest.FromString,
                    response_serializer=admin_dot_admin__alerts__pb2.AlertSearchResponse.SerializeToString,
            ),
            'Acknowledge': grpc.unary_unary_rpc_method_handler(
                    servicer.Acknowledge,
                    request_deserializer=admin_dot_admin__alerts__pb2.AcknowledgeAlertRequest.FromString,
                    response_serializer=admin_dot_admin__alerts__pb2.AlertOperationResponse.SerializeToString,
            ),
            'Resolve': grpc.unary_unary_rpc_method_handler(
                    servicer.Resolve,
                    request_deserializer=admin_dot_admin__alerts__pb2.ResolveAlertRequest.FromString,
                    response_serializer=admin_dot_admin__alerts__pb2.AlertOperationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AdminAlertService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminAlertService(object):
    """Service definition for managing alert s
    """

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminAlertService/Search',
            admin_dot_admin__alerts__pb2.AlertSearchRequest.SerializeToString,
            admin_dot_admin__alerts__pb2.AlertSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Acknowledge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminAlertService/Acknowledge',
            admin_dot_admin__alerts__pb2.AcknowledgeAlertRequest.SerializeToString,
            admin_dot_admin__alerts__pb2.AlertOperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Resolve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminAlertService/Resolve',
            admin_dot_admin__alerts__pb2.ResolveAlertRequest.SerializeToString,
            admin_dot_admin__alerts__pb2.AlertOperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
