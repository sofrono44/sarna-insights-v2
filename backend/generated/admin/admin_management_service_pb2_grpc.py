# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from .. import account_application_pb2 as account__application__pb2
from . import admin_management_pb2 as admin_dot_admin__management__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class AdminManagementServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AccountsSearch = channel.unary_unary(
                '/AdminManagementService/AccountsSearch',
                request_serializer=admin_dot_admin__management__pb2.AccountsSearchRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.AccountsSearchResponse.FromString,
                )
        self.GetAccount = channel.unary_unary(
                '/AdminManagementService/GetAccount',
                request_serializer=admin_dot_admin__management__pb2.GetAccountRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.GetAccountResponse.FromString,
                )
        self.UpdateAccount = channel.unary_unary(
                '/AdminManagementService/UpdateAccount',
                request_serializer=admin_dot_admin__management__pb2.UpdateAccountRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.GetAccountResponse.FromString,
                )
        self.UsersSearch = channel.unary_unary(
                '/AdminManagementService/UsersSearch',
                request_serializer=admin_dot_admin__management__pb2.UsersSearchRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.UsersSearchResponse.FromString,
                )
        self.GetUser = channel.unary_unary(
                '/AdminManagementService/GetUser',
                request_serializer=admin_dot_admin__management__pb2.GetUserRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.GetUserResponse.FromString,
                )
        self.GetUserStatus = channel.unary_unary(
                '/AdminManagementService/GetUserStatus',
                request_serializer=admin_dot_admin__management__pb2.GetUserStatusRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.GetUserStatusResponse.FromString,
                )
        self.GetUserAccounts = channel.unary_unary(
                '/AdminManagementService/GetUserAccounts',
                request_serializer=admin_dot_admin__management__pb2.GetUserAccountsRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.GetUserAccountsResponse.FromString,
                )
        self.UpdateUserStatus = channel.unary_unary(
                '/AdminManagementService/UpdateUserStatus',
                request_serializer=admin_dot_admin__management__pb2.UpdateUserStatusRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.GetUserResponse.FromString,
                )
        self.UpdateUserIsEmployeeStatus = channel.unary_unary(
                '/AdminManagementService/UpdateUserIsEmployeeStatus',
                request_serializer=admin_dot_admin__management__pb2.UpdateUserIsEmployeeStatusRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.GetUserResponse.FromString,
                )
        self.LinkUserToAccount = channel.unary_unary(
                '/AdminManagementService/LinkUserToAccount',
                request_serializer=admin_dot_admin__management__pb2.LinkUserToAccountRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.GetUserResponse.FromString,
                )
        self.UnlinkUserFromAccount = channel.unary_unary(
                '/AdminManagementService/UnlinkUserFromAccount',
                request_serializer=admin_dot_admin__management__pb2.LinkUserToAccountRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.GetUserResponse.FromString,
                )
        self.GetSecurityQuestions = channel.unary_unary(
                '/AdminManagementService/GetSecurityQuestions',
                request_serializer=admin_dot_admin__management__pb2.GetSecurityQuestionsRequest.SerializeToString,
                response_deserializer=account__application__pb2.SecurityQuestionUserResponsesResponse.FromString,
                )
        self.SendEmailToUser = channel.unary_unary(
                '/AdminManagementService/SendEmailToUser',
                request_serializer=admin_dot_admin__management__pb2.SendEmailToUserRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.SendEmailToUserResponse.FromString,
                )
        self.ManageUser = channel.unary_unary(
                '/AdminManagementService/ManageUser',
                request_serializer=admin_dot_admin__management__pb2.ManageUserRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.ManageUserResponse.FromString,
                )
        self.GetBranch = channel.unary_unary(
                '/AdminManagementService/GetBranch',
                request_serializer=admin_dot_admin__management__pb2.BranchesRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.GetBranchesResponse.FromString,
                )
        self.ManageBranch = channel.unary_unary(
                '/AdminManagementService/ManageBranch',
                request_serializer=admin_dot_admin__management__pb2.Branch.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.ManageBranchResponse.FromString,
                )
        self.DeleteBranch = channel.unary_unary(
                '/AdminManagementService/DeleteBranch',
                request_serializer=admin_dot_admin__management__pb2.BranchesRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.ManageBranchResponse.FromString,
                )
        self.UploadMorningFile = channel.stream_unary(
                '/AdminManagementService/UploadMorningFile',
                request_serializer=admin_dot_admin__management__pb2.UploadMorningFileRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.UploadMorningFileResponse.FromString,
                )
        self.GetAccountGroups = channel.unary_unary(
                '/AdminManagementService/GetAccountGroups',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.AccountGroupsResponse.FromString,
                )
        self.GetAccountGroup = channel.unary_unary(
                '/AdminManagementService/GetAccountGroup',
                request_serializer=admin_dot_admin__management__pb2.AccountGroupRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.AccountGroupResponse.FromString,
                )
        self.ManageAccountGroup = channel.unary_unary(
                '/AdminManagementService/ManageAccountGroup',
                request_serializer=admin_dot_admin__management__pb2.AccountGroup.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.ManageAccountGroupsResponse.FromString,
                )
        self.DeleteAccountGroup = channel.unary_unary(
                '/AdminManagementService/DeleteAccountGroup',
                request_serializer=admin_dot_admin__management__pb2.DeleteAccountGroupRequest.SerializeToString,
                response_deserializer=admin_dot_admin__management__pb2.DeleteAccountGroupResponse.FromString,
                )


class AdminManagementServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AccountsSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UsersSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserAccounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserIsEmployeeStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LinkUserToAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlinkUserFromAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSecurityQuestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendEmailToUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManageUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManageBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadMorningFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManageAccountGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccountGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AccountsSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountsSearch,
                    request_deserializer=admin_dot_admin__management__pb2.AccountsSearchRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.AccountsSearchResponse.SerializeToString,
            ),
            'GetAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccount,
                    request_deserializer=admin_dot_admin__management__pb2.GetAccountRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.GetAccountResponse.SerializeToString,
            ),
            'UpdateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAccount,
                    request_deserializer=admin_dot_admin__management__pb2.UpdateAccountRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.GetAccountResponse.SerializeToString,
            ),
            'UsersSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.UsersSearch,
                    request_deserializer=admin_dot_admin__management__pb2.UsersSearchRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.UsersSearchResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=admin_dot_admin__management__pb2.GetUserRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.GetUserResponse.SerializeToString,
            ),
            'GetUserStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserStatus,
                    request_deserializer=admin_dot_admin__management__pb2.GetUserStatusRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.GetUserStatusResponse.SerializeToString,
            ),
            'GetUserAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserAccounts,
                    request_deserializer=admin_dot_admin__management__pb2.GetUserAccountsRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.GetUserAccountsResponse.SerializeToString,
            ),
            'UpdateUserStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserStatus,
                    request_deserializer=admin_dot_admin__management__pb2.UpdateUserStatusRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.GetUserResponse.SerializeToString,
            ),
            'UpdateUserIsEmployeeStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserIsEmployeeStatus,
                    request_deserializer=admin_dot_admin__management__pb2.UpdateUserIsEmployeeStatusRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.GetUserResponse.SerializeToString,
            ),
            'LinkUserToAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.LinkUserToAccount,
                    request_deserializer=admin_dot_admin__management__pb2.LinkUserToAccountRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.GetUserResponse.SerializeToString,
            ),
            'UnlinkUserFromAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlinkUserFromAccount,
                    request_deserializer=admin_dot_admin__management__pb2.LinkUserToAccountRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.GetUserResponse.SerializeToString,
            ),
            'GetSecurityQuestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSecurityQuestions,
                    request_deserializer=admin_dot_admin__management__pb2.GetSecurityQuestionsRequest.FromString,
                    response_serializer=account__application__pb2.SecurityQuestionUserResponsesResponse.SerializeToString,
            ),
            'SendEmailToUser': grpc.unary_unary_rpc_method_handler(
                    servicer.SendEmailToUser,
                    request_deserializer=admin_dot_admin__management__pb2.SendEmailToUserRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.SendEmailToUserResponse.SerializeToString,
            ),
            'ManageUser': grpc.unary_unary_rpc_method_handler(
                    servicer.ManageUser,
                    request_deserializer=admin_dot_admin__management__pb2.ManageUserRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.ManageUserResponse.SerializeToString,
            ),
            'GetBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBranch,
                    request_deserializer=admin_dot_admin__management__pb2.BranchesRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.GetBranchesResponse.SerializeToString,
            ),
            'ManageBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.ManageBranch,
                    request_deserializer=admin_dot_admin__management__pb2.Branch.FromString,
                    response_serializer=admin_dot_admin__management__pb2.ManageBranchResponse.SerializeToString,
            ),
            'DeleteBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBranch,
                    request_deserializer=admin_dot_admin__management__pb2.BranchesRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.ManageBranchResponse.SerializeToString,
            ),
            'UploadMorningFile': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadMorningFile,
                    request_deserializer=admin_dot_admin__management__pb2.UploadMorningFileRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.UploadMorningFileResponse.SerializeToString,
            ),
            'GetAccountGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccountGroups,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=admin_dot_admin__management__pb2.AccountGroupsResponse.SerializeToString,
            ),
            'GetAccountGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccountGroup,
                    request_deserializer=admin_dot_admin__management__pb2.AccountGroupRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.AccountGroupResponse.SerializeToString,
            ),
            'ManageAccountGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.ManageAccountGroup,
                    request_deserializer=admin_dot_admin__management__pb2.AccountGroup.FromString,
                    response_serializer=admin_dot_admin__management__pb2.ManageAccountGroupsResponse.SerializeToString,
            ),
            'DeleteAccountGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccountGroup,
                    request_deserializer=admin_dot_admin__management__pb2.DeleteAccountGroupRequest.FromString,
                    response_serializer=admin_dot_admin__management__pb2.DeleteAccountGroupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AdminManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminManagementService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AccountsSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/AccountsSearch',
            admin_dot_admin__management__pb2.AccountsSearchRequest.SerializeToString,
            admin_dot_admin__management__pb2.AccountsSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/GetAccount',
            admin_dot_admin__management__pb2.GetAccountRequest.SerializeToString,
            admin_dot_admin__management__pb2.GetAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/UpdateAccount',
            admin_dot_admin__management__pb2.UpdateAccountRequest.SerializeToString,
            admin_dot_admin__management__pb2.GetAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UsersSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/UsersSearch',
            admin_dot_admin__management__pb2.UsersSearchRequest.SerializeToString,
            admin_dot_admin__management__pb2.UsersSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/GetUser',
            admin_dot_admin__management__pb2.GetUserRequest.SerializeToString,
            admin_dot_admin__management__pb2.GetUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/GetUserStatus',
            admin_dot_admin__management__pb2.GetUserStatusRequest.SerializeToString,
            admin_dot_admin__management__pb2.GetUserStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/GetUserAccounts',
            admin_dot_admin__management__pb2.GetUserAccountsRequest.SerializeToString,
            admin_dot_admin__management__pb2.GetUserAccountsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/UpdateUserStatus',
            admin_dot_admin__management__pb2.UpdateUserStatusRequest.SerializeToString,
            admin_dot_admin__management__pb2.GetUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserIsEmployeeStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/UpdateUserIsEmployeeStatus',
            admin_dot_admin__management__pb2.UpdateUserIsEmployeeStatusRequest.SerializeToString,
            admin_dot_admin__management__pb2.GetUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LinkUserToAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/LinkUserToAccount',
            admin_dot_admin__management__pb2.LinkUserToAccountRequest.SerializeToString,
            admin_dot_admin__management__pb2.GetUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnlinkUserFromAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/UnlinkUserFromAccount',
            admin_dot_admin__management__pb2.LinkUserToAccountRequest.SerializeToString,
            admin_dot_admin__management__pb2.GetUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSecurityQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/GetSecurityQuestions',
            admin_dot_admin__management__pb2.GetSecurityQuestionsRequest.SerializeToString,
            account__application__pb2.SecurityQuestionUserResponsesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendEmailToUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/SendEmailToUser',
            admin_dot_admin__management__pb2.SendEmailToUserRequest.SerializeToString,
            admin_dot_admin__management__pb2.SendEmailToUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ManageUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/ManageUser',
            admin_dot_admin__management__pb2.ManageUserRequest.SerializeToString,
            admin_dot_admin__management__pb2.ManageUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/GetBranch',
            admin_dot_admin__management__pb2.BranchesRequest.SerializeToString,
            admin_dot_admin__management__pb2.GetBranchesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ManageBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/ManageBranch',
            admin_dot_admin__management__pb2.Branch.SerializeToString,
            admin_dot_admin__management__pb2.ManageBranchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/DeleteBranch',
            admin_dot_admin__management__pb2.BranchesRequest.SerializeToString,
            admin_dot_admin__management__pb2.ManageBranchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadMorningFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/AdminManagementService/UploadMorningFile',
            admin_dot_admin__management__pb2.UploadMorningFileRequest.SerializeToString,
            admin_dot_admin__management__pb2.UploadMorningFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccountGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/GetAccountGroups',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            admin_dot_admin__management__pb2.AccountGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccountGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/GetAccountGroup',
            admin_dot_admin__management__pb2.AccountGroupRequest.SerializeToString,
            admin_dot_admin__management__pb2.AccountGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ManageAccountGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/ManageAccountGroup',
            admin_dot_admin__management__pb2.AccountGroup.SerializeToString,
            admin_dot_admin__management__pb2.ManageAccountGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAccountGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AdminManagementService/DeleteAccountGroup',
            admin_dot_admin__management__pb2.DeleteAccountGroupRequest.SerializeToString,
            admin_dot_admin__management__pb2.DeleteAccountGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
